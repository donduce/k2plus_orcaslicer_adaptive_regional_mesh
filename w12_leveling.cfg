# CreateDate: 2025/09/09
# SPDX-License-Identifier: Unlicense
# Public domain. No warranty.
# --- Druckbereich aus dem OrcaSlicer Ã¼bernehmen ---
# --- Import print area from OrcaSlicer ---

[gcode_macro PRINT_BOUNDS]
variable_min_x: 0
variable_min_y: 0
variable_max_x: 0
variable_max_y: 0
gcode:

[gcode_macro SET_PRINT_MIN]
gcode:
  {% if 'X' in params and 'Y' in params %}
    {% set x = params.X|float %}{% set y = params.Y|float %}
  {% else %}
    {% set xy = rawparams.split(',') %}
    {% set x = xy[0]|float %}{% set y = xy[1]|float %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=PRINT_BOUNDS VARIABLE=min_x VALUE={x}
  SET_GCODE_VARIABLE MACRO=PRINT_BOUNDS VARIABLE=min_y VALUE={y}

[gcode_macro SET_PRINT_MAX]
gcode:
  {% if 'X' in params and 'Y' in params %}
    {% set x = params.X|float %}{% set y = params.Y|float %}
  {% else %}
    {% set xy = rawparams.split(',') %}
    {% set x = xy[0]|float %}{% set y = xy[1]|float %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=PRINT_BOUNDS VARIABLE=max_x VALUE={x}
  SET_GCODE_VARIABLE MACRO=PRINT_BOUNDS VARIABLE=max_y VALUE={y}

# ---------------------------------------------------------------- #

# --- ADAPTIVE_REGION_MESH by w12 ---

[gcode_macro DO_REGIONAL_MESH]
gcode:
  {% set min_x = printer["gcode_macro PRINT_BOUNDS"].min_x|float %}
  {% set min_y = printer["gcode_macro PRINT_BOUNDS"].min_y|float %}
  {% set max_x = printer["gcode_macro PRINT_BOUNDS"].max_x|float %}
  {% set max_y = printer["gcode_macro PRINT_BOUNDS"].max_y|float %}

  {% if max_x <= min_x or max_y <= min_y %}
    {action_respond_info('No bounds -> full mesh')}
    BED_MESH_CALIBRATE {rawparams}
    RETURN
  {% endif %}

  {% set w = max_x - min_x %}
  {% set h = max_y - min_y %}
  {% set span = w if w > h else h %}

  {% if span < 140 %}{% set cnt = 5 %}
  {% elif span < 220 %}{% set cnt = 7 %}
  {% else %}{% set cnt = 9 %}{% endif %}

  {% if 'PROBE_COUNT' in params|upper %}
    {% set probe_arg = '' %}
    {% set pc = params.PROBE_COUNT|string %}
    {% set parts = pc.split(',') %}
    {% set nx = (parts[0]|int) if parts|length > 0 else cnt %}
    {% set ny = (parts[1]|int) if parts|length > 1 else nx %}
    {% set chosen = nx ~ 'x' ~ ny %}
  {% else %}
    {% set nx = cnt %}{% set ny = cnt %}
    {% set probe_arg = 'PROBE_COUNT=' ~ nx ~ ',' ~ ny %}
    {% set chosen = nx ~ 'x' ~ ny %}
  {% endif %}

  {% if 'RELATIVE_REFERENCE_INDEX' in params|upper %}
    {% set rri_arg = '' %}
  {% elif nx == ny and (nx % 2 == 1) %}
    {% set rri = ((nx*ny) - 1) // 2 %}
    {% set rri_arg = 'RELATIVE_REFERENCE_INDEX=' ~ rri %}
  {% else %}
    {% set rri_arg = '' %}
  {% endif %}

  {action_respond_info('Regional mesh: MIN=(' ~ min_x ~ ',' ~ min_y ~ '), MAX=(' ~ max_x ~ ',' ~ max_y ~ '), span=' ~ (span|round(1)) ~ 'mm -> PROBE_COUNT=' ~ chosen)}

  BED_MESH_CALIBRATE MESH_MIN={min_x},{min_y} MESH_MAX={max_x},{max_y} {probe_arg} {rri_arg} {rawparams}  